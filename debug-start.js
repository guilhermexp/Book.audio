import { spawn } from 'child_process';
import { existsSync } from 'fs';

console.log('üîç Diagn√≥stico Book.audio\n');

// Verificar Node e NPM
console.log('üìä Vers√µes:');
console.log(`Node: ${process.version}`);
console.log(`NPM: ${process.env.npm_version || 'N√£o detectado'}`);
console.log(`Platform: ${process.platform}`);
console.log(`Arch: ${process.arch}\n`);

// Verificar depend√™ncias
console.log('üì¶ Verificando depend√™ncias...');
if (!existsSync('node_modules')) {
    console.log('‚ùå node_modules n√£o encontrado!');
    console.log('Execute: npm install\n');
} else {
    console.log('‚úÖ node_modules encontrado\n');
}

// Verificar ambiente Python
console.log('üêç Verificando Python...');
if (!existsSync('backend/venv')) {
    console.log('‚ùå Virtual environment Python n√£o encontrado!');
    console.log('Execute: npm run backend:setup\n');
} else {
    console.log('‚úÖ Virtual environment Python encontrado\n');
}

// Verificar arquivo .env
console.log('üîë Verificando configura√ß√£o...');
if (!existsSync('.env.local') && !existsSync('.env')) {
    console.log('‚ö†Ô∏è  Arquivo .env n√£o encontrado');
    console.log('Crie um arquivo .env.local com: GEMINI_API_KEY=sua_chave\n');
} else {
    console.log('‚úÖ Arquivo de configura√ß√£o encontrado\n');
}

// Tentar iniciar apenas o frontend
console.log('üé® Tentando iniciar frontend...');
const frontend = spawn('npm', ['run', 'dev:frontend-only'], {
    stdio: 'inherit',
    shell: true
});

frontend.on('error', (err) => {
    console.error('‚ùå Erro ao iniciar frontend:', err.message);
});

frontend.on('exit', (code) => {
    if (code !== 0) {
        console.error(`‚ùå Frontend parou com c√≥digo ${code}`);
        console.log('\nüí° Sugest√µes:');
        console.log('1. Verifique se a porta 5173 est√° livre');
        console.log('2. Execute: npm install');
        console.log('3. Verifique erros de sintaxe nos arquivos');
    }
});
